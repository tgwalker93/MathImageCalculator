{"version":3,"sources":["components/Grid/Col.js","components/Grid/Container.js","components/Grid/Row.js","components/Form/Input.js","components/Form/Button.js","utils/API.js","pages/calculator/calculator.js","App.js","index.js"],"names":["Col","props","className","size","split","map","join","children","Container","id","fluid","Row","Input","formgroupclass","htmlFor","label","isvalid","fielderror","Button","imageData","axios","post","CalculatorPage","onFileChange","event","setState","selectedFile","target","files","buttonClicked","nameOfButtonClicked","lastAPIChoice","choiceMade","onFileUpload","localSelectedFileBase64","state","FormData","append","name","getBase64","result","includes","console","log","substring","indexOf","selectedFileBase64","uploadButtonClicked","callMathPixAPI","callGoogleVisionAPI","fileData","type","lastModifiedDate","toDateString","onChange","wolframXMLData","wolframSubPods","wolframInputFromMathPixReturn","callWolframAlphaAPIComplete","WolframAlphaInputText","searchButtonClicked","this","wolframAPIInput","replace","callWolframAlphaAPI","input","get","proxyurl","headers","then","response","parseXML","data","catch","error","raw","parseString","require","err","queryresult","$","pods","pod","i","length","subpod","j","img","k","push","postObj","imageBase64","API","newResult","responses","labelAnnotations","description","parseInt","score","src","calculateResultBeforeCallingWolframAlpha","calculateResult","responseData","confidence","text","imageText","arrOfNumsFromString","match","file","cb","reader","FileReader","readAsDataURL","onload","onerror","e","value","style","variant","onClick","reset","handleChange","bind","callWolframAlphaAPIWithTextInput","key","alt","title","width","height","themes","colorinvertable","Component","withRouter","App","exact","path","render","to","from","ReactDOM","component","document","getElementById"],"mappings":"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","file":"static/js/main.adfb48b5.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Col = props =>\n  <div className={props.size.split(\" \").map(size => \"col-\" + size).join(\" \")} {...props}>\n    {props.children}\n  </div>;\n","import React from \"react\";\n\nexport const Container = props =>\n  <div id={props.id} className={`container${props.fluid === \"true\"  ? \"-fluid\" : \"\"}`} {...props}>\n    {props.children}\n  </div>;\n","import React from \"react\";\n//({ fluid, children, props })\nexport const Row = props =>\n  <div className={`row${props.fluid ? \"-fluid\" : \"\"}`} {...props}> \n    {props.children}\n  </div>;\n","import React from \"react\";\n\nexport const Input = props =>\n  <div className={props.formgroupclass}>\n\n    <label htmlFor=\"inputField\">{props.label}</label>\n    <input className=\"form-control\" id=\"inputField\" {...props} />\n    {props.isvalid === \"true\" ? \"\" : <span className=\"help-block\">{props.fielderror}</span>}\n  </div>;\n","import React from \"react\";\n\nexport const Button = props =>\n  <button {...props} className=\"btn btn-pill btn-light btn-lg\">\n    {props.children}\n  </button>;\n","import axios from \"axios\";\r\n\r\nexport default {\r\n\r\n    // user: function () {\r\n    //     return axios.get(\"/api/user\");\r\n    // },\r\n    // sendForgotPasswordEmail(userObj) {\r\n    //     return axios.post(\"/api/user/sendForgotPasswordEmail\", userObj);\r\n    // },\r\n\r\n    calculateImageLabel(imageData) {\r\n        return axios.post(\"/api/calculator/labelImage\", imageData);\r\n     },\r\n\r\n};","import React, { Component } from \"react\";\r\nimport { Col, Row, Container } from \"../../components/Grid\";\r\nimport { Input, Button, TextArea } from \"../../components/Form\";\r\nimport API from \"../../utils/API\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport { withRouter } from 'react-router';\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nclass CalculatorPage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            // Initially, no file is selected \r\n            selectedFile: null,\r\n            selectedFileBase64: \"\",\r\n            result: \"\",\r\n            lastAPIChoice: \"\",\r\n            wolframXMLData: \"\",\r\n            wolframSubPods: [],\r\n            wolframInputFromMathPixReturn: \"\",\r\n            choiceMade: false,\r\n            uploadButtonClicked: false,\r\n            callWolframAlphaAPIComplete: false,\r\n            WolframAlphaInputText: \"\",\r\n            searchButtonClicked: false\r\n        };\r\n\r\n    }\r\n\r\n    // On file selected (from the pop up of the file explorer) \r\n    onFileChange = event => {\r\n\r\n        // Update the state \r\n        this.setState({ selectedFile: event.target.files[0] });\r\n\r\n    }; \r\n\r\n    buttonClicked = (nameOfButtonClicked) => {\r\n        this.setState({\r\n            lastAPIChoice: nameOfButtonClicked,\r\n            choiceMade: true\r\n        }, () => {\r\n\r\n               // this.renderChoice();\r\n\r\n            });\r\n\r\n    }\r\n\r\n    // On file upload (click the upload button) \r\n    onFileUpload = (nameOfButtonClicked) => {\r\n\r\n        if(!this.state.selectedFile){\r\n            return;\r\n        }\r\n\r\n        // Create an object of formData \r\n        const formData = new FormData();\r\n\r\n        // Update the formData object \r\n        formData.append(\r\n            \"myFile\",\r\n            this.state.selectedFile,\r\n            this.state.selectedFile.name\r\n\r\n        );\r\n\r\n        var localSelectedFileBase64;\r\n\r\n        // Details of the uploaded file \r\n        this.getBase64(this.state.selectedFile, (result) => {\r\n            localSelectedFileBase64 = result;\r\n\r\n            if (localSelectedFileBase64.includes(\"base64\") && nameOfButtonClicked === \"GoogleVision\"){\r\n                console.log(\"found base64\");\r\n                localSelectedFileBase64 = result.substring(result.indexOf(\",\") + 1);\r\n            }\r\n\r\n            this.setState({\r\n                selectedFileBase64: localSelectedFileBase64,\r\n                lastAPIChoice: nameOfButtonClicked,\r\n                uploadButtonClicked: true\r\n            }, () => {\r\n                if(nameOfButtonClicked === \"MathPix\") {\r\n                    this.callMathPixAPI();\r\n                }\r\n                else if (nameOfButtonClicked === \"GoogleVision\") {\r\n                    this.callGoogleVisionAPI();\r\n                } \r\n                else if (nameOfButtonClicked === \"WolframAlphaImage\"){\r\n                    this.callMathPixAPI();\r\n                }\r\n            });\r\n\r\n        });\r\n\r\n    }; \r\n    callWolframAlphaAPIWithTextInput() {\r\n\r\n        this.setState({\r\n            searchButtonClicked: true\r\n        })\r\n\r\n        var wolframAPIInput = \"solve+\" + this.state.WolframAlphaInputText;\r\n        wolframAPIInput = wolframAPIInput.replace(/=/g, '%3D');\r\n        wolframAPIInput = wolframAPIInput.replace(/\\s/g, '');\r\n        wolframAPIInput = wolframAPIInput.replace(/[+]/g, '%2b');\r\n        this.callWolframAlphaAPI(wolframAPIInput);\r\n\r\n    }\r\n\r\n    callWolframAlphaAPI(input) {\r\n\r\n\r\n        var localHeaders = {\r\n            \"content-type\": \"application/json\",\r\n            \"Access-Control-Allow-Origin\": \"*\"\r\n        }\r\n\r\n        const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n        axios.get(proxyurl+'http://api.wolframalpha.com/v2/query?appid=KLVH4J-36KKQUULAH&input=' + input, {\r\n            headers: localHeaders\r\n        })\r\n            .then((response) => {\r\n                this.parseXML(response.data);\r\n                this.setState({\r\n                    callWolframAlphaAPIComplete: true\r\n                })\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n\r\n    }\r\n\r\n\r\n    parseXML(raw) {\r\n        var parseString = require('xml2js').parseString;\r\n        var result = \"\";\r\n\r\n        parseString(raw, (err, result) => {\r\n            console.log(result);\r\n            if (result.queryresult.$.error === 'false') {\r\n                var pods = result.queryresult.pod;\r\n                if(!pods){\r\n                    return;\r\n                }\r\n                for (var i = 0; i < pods.length; i++) {\r\n                    if (pods[i].subpod) {\r\n                        for (var j = 0; j < pods[i].subpod.length; j++) {\r\n                            if (pods[i].subpod[j]) {\r\n                                if (pods[i].subpod[j].img) {\r\n                                    for (var k = 0; k < pods[i].subpod[j].img.length; k++) {\r\n                                        this.state.wolframSubPods.push(pods[i].subpod[j].img[k].$);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                }\r\n            } else {\r\n                this.setState({\r\n                    result: \"There was an error in sending this request to WolframAlpha!\"\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    callGoogleVisionAPI() {\r\n        var postObj = {\r\n            imageBase64: this.state.selectedFileBase64\r\n        }\r\n\r\n        API.calculateImageLabel(postObj)\r\n            .then(response => {\r\n\r\n                if (!response.data.error) {\r\n                    console.log(\"Calling google vision API was successful!\");\r\n                    console.log(response.data);\r\n                    var newResult = \"\";\r\n                    if (response.data.responses.length > 1) {\r\n                        \r\n                    }\r\n                    for(var i=0; i<response.data.responses.length; i++) {\r\n                        console.log(\"i is \" + i);\r\n                        newResult += \"Your picture contains a \" + response.data.responses[i].labelAnnotations[i].description\r\n                        console.log(newResult);\r\n                        newResult += \"\\n\\n\"\r\n                        newResult += \"I am approximately \" + parseInt(response.data.responses[i].labelAnnotations[i].score * 100) + \"% confident of this.\\n\\n\"\r\n                    }\r\n                    console.log(newResult);\r\n                    this.setState({\r\n                        result: newResult\r\n                    })\r\n                    \r\n                } else {\r\n                    this.setState({\r\n                        result: \"There was an error with the image or the server!\"\r\n                    })\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n\r\n    callMathPixAPI() {\r\n        var postObj = {\r\n            src: this.state.selectedFileBase64\r\n        }\r\n\r\n        var localHeaders = {\r\n            \"content-type\": \"application/json\",\r\n            \"app_id\": \"tgwalker93_gmail_com_cc0d50\",\r\n            \"app_key\": \"72c390b89e11c4263505\"\r\n        }\r\n\r\n        axios.post('https://api.mathpix.com/v3/text', postObj, {\r\n            headers: localHeaders\r\n        })\r\n            .then((response) => {\r\n                console.log(\"Post successful\");\r\n                console.log(response);\r\n                if(this.state.lastAPIChoice === \"WolframAlphaImage\"){\r\n                    this.calculateResultBeforeCallingWolframAlpha(response.data);\r\n                } else {\r\n                    this.calculateResult(response.data);\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    calculateResultBeforeCallingWolframAlpha(responseData){\r\n        if (responseData.confidence > .90) {\r\n            var wolframAPIInput = \"solve+\" + responseData.text.substring(2,responseData.text.length-3);\r\n            wolframAPIInput = wolframAPIInput.replace(/=/g, '%3D');\r\n            wolframAPIInput = wolframAPIInput.replace(/\\s/g, '');\r\n            wolframAPIInput = wolframAPIInput.replace(/[+]/g, '%2b');\r\n\r\n            this.callWolframAlphaAPI(wolframAPIInput);\r\n\r\n        } else {\r\n            this.setState({\r\n                result: \"I'm sorry I cannot read the image.\"\r\n            })\r\n        }\r\n    }\r\n\r\n    calculateResult(responseData) {\r\n        if (responseData.confidence > .90){\r\n            var imageText = responseData.text;\r\n            var arrOfNumsFromString = imageText.match(/\\d+/g);\r\n            console.log(arrOfNumsFromString);\r\n            if(imageText.includes(\"longdiv\")){\r\n                arrOfNumsFromString = imageText.match(/(\\d\\s)+/g);\r\n                for(var i = 0; i<arrOfNumsFromString.length; i++) {\r\n                    arrOfNumsFromString[i] = arrOfNumsFromString[i].replace(/\\s/g, '');\r\n                }\r\n                if(arrOfNumsFromString.length == 2){\r\n                    this.setState({\r\n                        result: arrOfNumsFromString[1] + \" divided by \" + arrOfNumsFromString[0] + \" = \" + parseInt(arrOfNumsFromString[1]) / parseInt(arrOfNumsFromString[0]),\r\n                        wolframInputFromMathPixReturn: \"solve+\" + arrOfNumsFromString[1] + \"/\" + arrOfNumsFromString[0]\r\n                    })\r\n                    return;\r\n                }\r\n            }\r\n            if (arrOfNumsFromString.length !== 2){\r\n                this.setState({\r\n                    result: \"There are two many numbers to calculate!\"\r\n                })\r\n            }\r\n            else if (imageText.includes(\"times\")){\r\n                \r\n                this.setState({\r\n                    result: arrOfNumsFromString[0] + \" times \" + arrOfNumsFromString[1] + \" = \" + parseInt(arrOfNumsFromString[0]) * parseInt(arrOfNumsFromString[1]),\r\n                    wolframInputFromMathPixReturn: \"solve+\" + arrOfNumsFromString[0] + \"*\" + arrOfNumsFromString[1]\r\n                })\r\n            }\r\n            else if (imageText.includes(\"div\") ) {\r\n\r\n                this.setState({\r\n                    result: arrOfNumsFromString[0] + \" divided by \" + arrOfNumsFromString[1] + \" = \" + parseInt(arrOfNumsFromString[0]) / parseInt(arrOfNumsFromString[1]),\r\n                    wolframInputFromMathPixReturn: \"solve+\"+arrOfNumsFromString[0]+\"/\"+arrOfNumsFromString[1]\r\n                })\r\n            }\r\n            else if (imageText.includes(\"-\")) {\r\n\r\n                this.setState({\r\n                    result: arrOfNumsFromString[0] + \" minus \" + arrOfNumsFromString[1] + \" = \" + (parseInt(arrOfNumsFromString[0]) - parseInt(arrOfNumsFromString[1])),\r\n                    wolframInputFromMathPixReturn: \"solve+\" + arrOfNumsFromString[0] + \"-\" + arrOfNumsFromString[1]\r\n                })\r\n            }\r\n            else if (imageText.includes(\"+\")) {\r\n\r\n                this.setState({\r\n                    result: arrOfNumsFromString[0] + \" plus \" + arrOfNumsFromString[1] + \" = \" + (parseInt(arrOfNumsFromString[0]) + parseInt(arrOfNumsFromString[1])),\r\n                    wolframInputFromMathPixReturn: \"solve+\" + arrOfNumsFromString[0] + \"+\" + arrOfNumsFromString[1]\r\n                })\r\n            }\r\n        } else{\r\n            this.setState({\r\n                result: \"I'm sorry I cannot read the image.\"\r\n            })\r\n        }\r\n    }\r\n\r\n    getBase64(file, cb) {\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = function () {\r\n            cb(reader.result)\r\n        };\r\n        reader.onerror = function (error) {\r\n            console.log('Error: ', error);\r\n        };\r\n\r\n    }\r\n\r\n    // File content to be displayed after \r\n    // file upload is complete \r\n    fileData = () => {\r\n\r\n        if (this.state.selectedFile && this.state.lastAPIChoice !== \"WolframAlphaInput\") {\r\n\r\n                return (\r\n                    <div>\r\n                        <h3>File Details:</h3>\r\n                        <p>File Name: {this.state.selectedFile.name}</p>\r\n                        <p>File Type: {this.state.selectedFile.type}</p>\r\n                        <p>\r\n                            Last Modified:{\" \"}\r\n                            {this.state.selectedFile.lastModifiedDate.toDateString()}\r\n                        </p>\r\n                    </div>\r\n                );\r\n            \r\n\r\n        } else if (this.state.lastAPIChoice === \"WolframAlphaInput\"){\r\n                return (\r\n                    <div>\r\n\r\n                    </div>\r\n                )\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <h2>Please Upload your Image</h2>\r\n                    <input id=\"chooseFileButton\" type=\"file\" onChange={this.onFileChange} />\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n\r\n    reset() {\r\n        this.setState({\r\n            selectedFile: null,\r\n            selectedFileBase64: \"\",\r\n            result: \"\",\r\n            lastAPIChoice: \"\",\r\n            wolframXMLData: \"\",\r\n            wolframSubPods: [],\r\n            wolframInputFromMathPixReturn: \"\",\r\n            choiceMade: false,\r\n            uploadButtonClicked: false,\r\n            callWolframAlphaAPIComplete: false,\r\n            WolframAlphaInputText: \"\",\r\n            searchButtonClicked: false\r\n        })\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    //Standard method for constantly updating input, since UI is constantly refreshing\r\n    handleChange(e) {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container id=\"mainContainer\" fluid=\"true\">\r\n                <Row id=\"headerRow\">\r\n                        <Col size=\"sm-12\"> \r\n                            <h1 style={{ \"textAlign\": \"center\", \"fontSize\":\"100px\" }}>\r\n                                Math Image Calculator\r\n                                </h1>\r\n\r\n                            {this.state.choiceMade ?\r\n                                    <Button id=\"resetButton\" variant=\"primary\" onClick={() => this.reset()}>\r\n                                        Reset\r\n                        </Button>\r\n                        \r\n                        : \"\"}\r\n                        </Col>\r\n                </Row>\r\n                <Container id=\"calculatorContainer\" fluid=\"true\">\r\n                <Row id=\"mainRow\">\r\n                    <Col size=\"sm-12\"> \r\n                        <div>\r\n                            {this.state.choiceMade ?\r\n                                <div>\r\n                                    <div id=\"choiceMadeGroup\">\r\n                                        {this.state.lastAPIChoice === \"WolframAlphaInput\" ? \r\n                                        \r\n                                        <div>\r\n                                                <Input label=\"Enter your expression or equation!\"\r\n                                                    value={this.state.WolframAlphaInputText}\r\n                                                    id=\"WolframAlphaInputText\" onChange={this.handleChange.bind(this)} name=\"WolframAlphaInputText\" />\r\n                                                {this.state.searchButtonClicked ? <div></div> :\r\n                                                <Button variant=\"primary\" onClick={() => this.callWolframAlphaAPIWithTextInput()}>\r\n                                                        Search\r\n                                                </Button>\r\n                                                 }\r\n                                        </div> \r\n                                        : \r\n                                        <div></div>\r\n                                         }\r\n                                        {this.state.lastAPIChoice === \"MathPix\" && this.state.selectedFile && !this.state.callWolframAlphaAPIComplete && this.state.uploadButtonClicked ? \r\n                                        <div>\r\n                                            <Button variant=\"primary\" onClick={() => this.callWolframAlphaAPI(this.state.wolframInputFromMathPixReturn)}>\r\n                                                    Show Details\r\n                                            </Button>\r\n                                        </div> : \r\n                                        <div>\r\n                                            \r\n                                        </div>}\r\n                                    </div>\r\n                                    <div id=\"uploadFileGroup\">\r\n                                        {this.fileData()}\r\n                                        {this.state.uploadButtonClicked || this.state.lastAPIChoice === \"WolframAlphaInput\" ? \r\n                                        \r\n                                        <div></div> \r\n                                        : \r\n                                        <div>\r\n                                        <Button variant=\"primary\" onClick={() => this.onFileUpload(this.state.lastAPIChoice)}>\r\n                                                    Upload\r\n                                                                            </Button>\r\n                                        <Button variant=\"primary\" onClick={() => this.reset()}>\r\n                                        Cancel\r\n                                        </Button>\r\n                                        </div>}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                :\r\n                                <div>\r\n                                    <h1 style={{ \"textAlign\": \"center\" }}>What would you like to do?</h1>\r\n                                <div id=\"buttonGroup\">\r\n                                    <Button variant=\"primary\" onClick={() => this.buttonClicked(\"MathPix\")}>\r\n                                        Upload Image of Simple Expression (2 Numbers Only)\r\n                                     </Button>\r\n                                    <Button variant=\"primary\" onClick={() => this.buttonClicked(\"WolframAlphaImage\")}>\r\n                                            Upload Image of Equation\r\n                                     </Button>\r\n                                    <Button variant=\"primary\" onClick={() => this.buttonClicked(\"GoogleVision\")}>\r\n                                        Upload Image to Find Shapes or Labels\r\n                                     </Button>\r\n                                    <Button variant=\"primary\" onClick={() => this.buttonClicked(\"WolframAlphaInput\")}>\r\n                                        Input Text of Equation or Expression\r\n                                     </Button>\r\n                                </div>\r\n                                </div>}\r\n                        </div>\r\n                        {this.state.result || this.state.callWolframAlphaAPIComplete ?                         \r\n                            <Container id=\"resultsContainer\" fluid=\"true\">\r\n                                <h1>Results</h1>\r\n                                <hr></hr>\r\n                                <h1>\r\n                                    {this.state.result.split(\"\\n\").map((i, key) => {\r\n                                        return <div key={key}>{i}</div>;\r\n                                    })}\r\n                                </h1>\r\n                                {this.state.wolframSubPods.map((subpod, key) => {\r\n                                    return (\r\n                                        <div>\r\n                                            <img key={key}\r\n                                                src={subpod.src}\r\n                                                alt={subpod.alt}\r\n                                                title={subpod.title}\r\n                                                width={subpod.width}\r\n                                                height={subpod.height}\r\n                                                type={subpod.type}\r\n                                                themes={subpod.themes}\r\n                                                colorinvertable={subpod.colorinvertable} />\r\n                                            <br />\r\n                                            <br />\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                            </Container>                      \r\n                        : \"\"}\r\n                    </Col>\r\n                </Row>\r\n                </Container>\r\n            </Container>\r\n        );\r\n\r\n\r\n    }\r\n}\r\n\r\n// export default Profile;\r\nexport default withRouter(CalculatorPage);","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport Calculator from \"./pages/calculator\"\nimport API from \"./utils/API\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n\n    }\n  }\n  componentDidMount() {\n \n  }\n\n  render() {\n\n    //IF USER IS NOT AUTHENTICATED, RENDER JUST THE LANDING PAGE\n    return (\n      <div className=\"App\">\n        <div>\n\n          <Route exact path=\"/calculator\"\n            render={() =>\n              <Calculator\n                \n              />} />\n\n          <Route exact path=\"/\" render={() => (\n            <Redirect to=\"/calculator\" />\n          )} />\n\n          <Redirect from=\"*\" to=\"/calculator\" /> \n\n        </div>\n      </div>\n    )\n  }\n\n}\nexport default App;\n// export default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter } from 'react-router-dom'\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nReactDOM.render(\n <BrowserRouter>   \n   <Switch>\n      <Route component={App} />\n   </Switch>\n </BrowserRouter>\n\n  , document.getElementById(\"root\"));\n\n"],"sourceRoot":""}